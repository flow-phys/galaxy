File:  challenge.txt
Description:  Brief description of methods used to impliment the N-body 
	      simulation using the Barnes-Hut algorithm
Author: Britton J. Olson
Date: June 2, 2010


Methods:  The standard Barnes-Hut algorithm as outlined in the references in the "instuctions.pdf" 
(and given in my README file) was implimented in fortran 90.  I made use of a derived type which 
represented a node in the quad tree.  This was the basis for my mini-library which builds the tree
at every time step.  This library required the use of recursive subroutines.


Crossover:  As mentioned in the handout, the Barnes Hut algorithm only is more effecient once 
certain problem size is reached.  There is substantial overhead which causes to the algorithm
to be slower at small values of N.  Once N is large, Barnes-Hut win out over the N^2 increase 
of the brute force method. 
   This "crossover" was found to be approximately N = 1600 (on the corn machines).  This was 
determined by running both algorithms with identicle arguments and timing their execution 
times.  The plot below (figure 1) was generated using gnuplot and cleary shows the location
where Barnes-Hut win out over the Brute force algorithm.


  Wall Time (sec)
    8 ++------+----------------+---------------+----------------+---------------+---------------++
      |       +                +               +                +             Brute Force **O*** +
      |                                                                        Barnes-Hut ==O=== |
      |                                                                                          O
      |                                                                                        **|
      |                                                                                      **  |
    7 ++                                                                                    *   ++
      |                                                                                   **     |
      |                                                                                  O       |
      |                                                                                 *        |
      |                                                                               **         |
    6 ++                                                                             *          ++
      |                                                                             *            |
      |                                                                           **             |
      |                                                                          *               |
      |                                                                        *O                |
      |                                                                      **                  |
    5 ++                                                                   **                   ++
      |                                                                  **                      |
      |                                                                 O                       =O
      |                                                                *                     === |
      |                                                               *                    ==    |
    4 ++                                                            **                 ==O=     ++
      |                                                            *               ====          |
      |                                                           *            =O==              |
      |                                                          *          ===                  |
      |                                                        *O         ==                     |
      |                                                      **       ==O=                       |
    3 ++                                                   **     ====                          ++
      |                                                  **   ==O=                               |
      |                                                *O ====                                   |
      |                                              **=O=                                       |
      |                                           =**=                                           |
      |                                       =O=**                                              |
    2 ++                                   ===*O*                                               ++
      |                                  == **                                                   |
      |                            ====O= **                                                     |
      |                       =O===     **                                                       |
      |                    ===       **O                                                         |
    1 ++                 ==      ****                                                           ++
      |              ==O=    **O*                                                                |
      |          ====    ****                                                                    |
      |   ====O==    **O*                                                                        |
      O===       ****                                                                            |
      |   ****O**              +               +                +               +                +
    0 O***----+----------------+---------------+----------------+---------------+---------------++
             500              1000            1500             2000            2500             3000
                                              N-Particles

  		      FIGURE 1: Speed of 2 algorithms showing cross over location


